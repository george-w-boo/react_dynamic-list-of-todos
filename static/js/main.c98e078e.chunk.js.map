{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","components/Filters/Filters.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","handleUserSelection","className","map","todo","classNames","completed","type","readOnly","checked","title","onClick","userId","id","API_URL","getData","path","a","fetch","response","json","CurrentUser","state","user","this","reloadUser","prevProps","setState","name","email","phone","onCleanButton","React","Component","Filters","todoTitle","value","placeholder","onChange","event","target","filterTodosByTitle","filterTodosByStatus","disabled","App","filteredTodos","selectedUserId","handleUserCleaning","currentState","filter","includes","todoStatus","filtered","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c98e078e.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  handleUserSelection: (userId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, handleUserSelection } = props;\n\n  // TodoList__item TodoList__item--unchecked\n\n  return (\n    <div className=\"TodoList\">\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  handleUserSelection(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (path: string, userId?: number | undefined) => {\n  let response;\n\n  if (userId) {\n    response = await fetch(`${API_URL}/${path}/${userId}`);\n\n    return response.json();\n  }\n\n  response = await fetch(`${API_URL}/${path}`);\n\n  return response.json();\n};\n\n// export const fetchUser = (userId: number) => {};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getData } from '../../api';\n\ntype Props = {\n  userId: number;\n  onCleanButton: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser(this.props.userId);\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await getData('users', userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n          type=\"button\"\n          onClick={this.props.onCleanButton}\n        >\n          Clear user\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\ntype Props = {\n  filterTodosByTitle: (title: string) => void;\n  filterTodosByStatus: (todoStatus: string) => void;\n};\n\ntype State = {\n  todoTitle: string;\n};\n\nexport class Filters extends React.Component<Props, State> {\n  state: State = {\n    todoTitle: '',\n  };\n\n  render() {\n    const { todoTitle } = this.state;\n\n    return (\n      <div className=\"App__filters\">\n        <input\n          type=\"text\"\n          value={todoTitle}\n          placeholder=\"Search by title\"\n          className=\"input is-primary\"\n          onChange={(event) => {\n            this.setState({\n              todoTitle: event.target.value,\n            });\n            this.props.filterTodosByTitle(event.target.value);\n          }}\n        />\n        <div className=\"select is-primary\">\n          <select\n            name=\"todoStatus\"\n            value=\"\"\n            onChange={(event) => {\n              this.props.filterTodosByStatus(event.target.value);\n            }}\n          >\n            <option value=\"\" disabled>Filter by:</option>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport 'bulma';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getData } from './api';\nimport { Filters } from './components/Filters';\n\ninterface State {\n  todos: Todo[];\n  filteredTodos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    filteredTodos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getData('todos?limit=20');\n\n    this.setState({\n      todos,\n      filteredTodos: todos,\n    });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  handleUserCleaning = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  filterTodosByTitle = (title: string) => {\n    this.setState(currentState => ({\n      filteredTodos: [...currentState.todos].filter(todo => todo.title.includes(title)),\n    }));\n  };\n\n  filterTodosByStatus = (todoStatus: string) => {\n    switch (todoStatus) {\n      case 'completed':\n        this.setState(currentState => {\n          const filtered = currentState.todos.filter(todo => todo.completed);\n\n          return ({\n            filteredTodos: [...filtered],\n          });\n        });\n        break;\n\n      case 'active':\n        this.setState(currentState => ({\n          filteredTodos: [...currentState.todos]\n            .filter(todo => !todo.completed),\n        }));\n        break;\n\n      default:\n        this.setState(currentState => ({\n          filteredTodos: currentState.todos,\n        }));\n    }\n  };\n\n  render() {\n    const { selectedUserId, filteredTodos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <h2>Todos:</h2>\n          <Filters\n            filterTodosByTitle={this.filterTodosByTitle}\n            filterTodosByStatus={this.filterTodosByStatus}\n          />\n          <TodoList\n            todos={filteredTodos}\n            handleUserSelection={this.handleUserSelection}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onCleanButton={this.handleUserCleaning} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}